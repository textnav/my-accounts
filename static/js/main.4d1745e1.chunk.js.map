{"version":3,"sources":["redux/account/account.reducer.ts","redux/account/account.types.ts","mock/mock.config.ts","services/http.ts","redux/account/account.actions.ts","services/accounts-http.service.ts","redux/user/user.types.ts","redux/user/user.actions.ts","services/users-http.service.ts","redux/account/account.selector.ts","assets/loader.svg","components/loader/Loader.tsx","components/account/AccountBalanceChart.tsx","components/account/Balance.tsx","components/account/Transactions.tsx","components/account/AccountPage.tsx","components/account/AccountPicker.tsx","components/account/AccountsPage.tsx","components/header/Header.tsx","redux/user/user.selector.ts","components/notfound/NotFound.tsx","components/transfer/TransferMoney.config.ts","components/transfer/TransferMoneyContent.tsx","components/transfer/TransferMoney.tsx","components/app/App.tsx","redux/user/user.reducer.ts","redux/reducers.ts","redux/store.ts","reportWebVitals.ts","index.tsx"],"names":["TransactionAction","FETCH_ACCOUNTS","FETCH_ACCOUNTS_SUCCESS","FETCH_ACCOUNTS_FAIL","FETCH_TRANSACTIONS","FETCH_TRANSACTIONS_SUCCESS","FETCH_TRANSACTIONS_FAIL","FETCH_CURRENCIES","FETCH_CURRENCIES_SUCCESS","FETCH_CURRENCIES_FAIL","initialAccountState","accounts","fetching","fetched","error","data","transactions","currencies","mockTransactions","mockAccounts","getAccounts","getProfile","mockUser","getTransactions","id","getCurrencies","mockCurrencies","postTransfer","fromAccountId","toAccountId","transferAmount","currency","description","multiplier","undefined","actualAmount","validateTransfer","fromAccount","getMockAccount","toAccount","balance","timestamp","Date","now","transactionFrom","generateUUID","action","DEBIT","amount","push","transactionTo","CREDIT","Array","isArray","accountId","find","item","trim","d","getTime","d2","performance","replace","c","r","Math","random","floor","toString","instance","axios","create","baseURL","headers","mock","MockAdapter","delayResponse","onGet","reply","config","url","substring","lastIndexOf","onPost","JSON","parse","initializeAxiosMockAdapter","http","fetchAccounts","dispatch","type","get","then","res","catch","response","status","fetchTransactions","fetchCurrencies","GET_PROFILE","GET_PROFILE_SUCCESS","GET_PROFILE_FAIL","getUser","profile","getAccountState","store","account","Loader","props","imgStyle","height","width","data-testid","style","display","alignItems","justifyContent","src","LoaderImg","alt","AccountBalanceChart","length","ResponsiveContainer","LineChart","map","toLocaleString","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","domain","name","YAxis","Tooltip","Line","stroke","useStyles","makeStyles","theme","createStyles","depositContext","flex","Balance","classes","useSelector","state","lastTransaction","ErrorOutline","Typography","component","variant","color","gutterBottom","className","Divider","columns","field","headerName","valueFormatter","params","value","getValue","Number","align","headerAlign","row","sortModel","sort","Transactions","dataGridComponents","Toolbar","GridToolbar","rows","pagination","autoPageSize","components","paper","padding","spacing","overflow","flexDirection","fixedHeight","AccountPage","fixedHeightPaper","clsx","Grid","container","xs","md","lg","Paper","disabled","opacity","active","palette","primary","main","fontWeight","AccountPicker","React","useState","anchorEl","setAnchorEl","isMenuOpen","Boolean","handleMenuClose","menuId","renderMenu","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","onClose","label","to","MenuItem","onClick","title","Button","aria-label","aria-controls","aria-haspopup","event","currentTarget","ArrowDropDown","appBarSpacer","mixins","toolbar","content","flexGrow","paddingTop","paddingBottom","info","textAlign","AccountsPage","useDispatch","useEffect","Container","maxWidth","flexCenter","grow","justifyBetween","menuButton","marginRight","breakpoints","up","link","Header","user","getUserState","AppBar","position","noWrap","AccountBalance","AttachMoney","NotFoundPage","initialFormValues","formSubmitted","formSubmitting","isFormPristine","isFormValid","success","initialHelperText","initialErrorsState","updateValuesAndValidity","payload","errors","helperText","values","fieldValues","accountsBalance","Map","forEach","set","hasOwnProperty","newErrors","newHelperText","newValues","defaultBalance","newValue","Object","every","x","gridGap","gridTemplateColumns","marginTop","marginBottom","centerContainer","TransferMoneyContent","resetForm","autoComplete","onSubmit","handleFormSubmit","TextField","required","select","fullWidth","onBlur","handleInputValue","onChange","entries","key","option","IconButton","ArrowForward","SendOutlined","TransferMoney","setValues","setErrors","setHelperText","e","a","preventDefault","post","resetFormValidations","target","App","path","default","emptyProfile","gender","age","address","initialUserState","combineReducers","middleware","thunk","composeEnhancers","composeWithDevTools","createStore","reducer","applyMiddleware","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d1745e1.chunk.js","sourcesContent":["import { ApiData } from \"../reducers\";\nimport { AccountActions } from \"./account.actions\";\nimport {\n  FETCH_ACCOUNTS,\n  FETCH_ACCOUNTS_FAIL,\n  FETCH_ACCOUNTS_SUCCESS,\n  FETCH_CURRENCIES,\n  FETCH_CURRENCIES_FAIL,\n  FETCH_CURRENCIES_SUCCESS,\n  FETCH_TRANSACTIONS,\n  FETCH_TRANSACTIONS_FAIL,\n  FETCH_TRANSACTIONS_SUCCESS,\n} from \"./account.types\";\n\nexport type CurrencyType = \"US$\" | \"HK$\";\n\n/**\n * the value of Currency is the exchange rate compared to US$\n */\nexport interface Currency {\n  [id: string]: number;\n}\n\nexport enum TransactionAction {\n  DEBIT = \"debit\",\n  CREDIT = \"credit\",\n}\nexport interface Transaction {\n  id: string;\n  timestamp: number;\n  action: TransactionAction;\n  description: string;\n  amount: number;\n  currency: CurrencyType;\n  balance: number;\n}\nexport interface Account {\n  id: string;\n  label: string;\n  currency: CurrencyType;\n  balance: number;\n}\nexport interface AccountState {\n  accounts: ApiData<Account[]>;\n  transactions: ApiData<Transaction[]>;\n  currencies: ApiData<Currency>;\n}\n\nexport const initialAccountState: AccountState = {\n  accounts: {\n    fetching: false,\n    fetched: false,\n    error: null,\n    data: [],\n  },\n  transactions: {\n    fetching: false,\n    fetched: false,\n    error: null,\n    data: [],\n  },\n  currencies: {\n    fetching: false,\n    fetched: false,\n    error: null,\n    data: {},\n  },\n};\n\nexport const account = (\n  state = initialAccountState,\n  action: AccountActions\n): AccountState => {\n  switch (action.type) {\n    case FETCH_ACCOUNTS: {\n      const accounts = {\n        ...state.accounts,\n        fetching: true,\n        fetched: false,\n        error: null,\n        data: [],\n      };\n      return {\n        ...state,\n        accounts,\n      };\n    }\n    case FETCH_ACCOUNTS_SUCCESS: {\n      const accounts = {\n        ...state.accounts,\n        fetching: false,\n        fetched: true,\n        data: action.accounts,\n      };\n      return {\n        ...state,\n        accounts,\n      };\n    }\n    case FETCH_ACCOUNTS_FAIL: {\n      const accounts = {\n        ...state.accounts,\n        fetching: false,\n        fetched: true,\n        data: [],\n        error: action.error,\n      };\n      return {\n        ...state,\n        accounts,\n      };\n    }\n    case FETCH_TRANSACTIONS: {\n      const transactions = {\n        ...state.transactions,\n        fetching: true,\n        fetched: false,\n        error: null,\n        data: [],\n      };\n      return {\n        ...state,\n        transactions,\n      };\n    }\n    case FETCH_TRANSACTIONS_SUCCESS: {\n      const transactions = {\n        ...state.transactions,\n        fetching: false,\n        fetched: true,\n        data: action.transactions,\n      };\n      return {\n        ...state,\n        transactions,\n      };\n    }\n    case FETCH_TRANSACTIONS_FAIL: {\n      const transactions = {\n        ...state.transactions,\n        fetching: false,\n        fetched: true,\n        data: [],\n        error: action.error,\n      };\n      return {\n        ...state,\n        transactions,\n      };\n    }\n    case FETCH_CURRENCIES: {\n      const currencies = {\n        ...state.currencies,\n        fetching: true,\n        fetched: false,\n        error: null,\n        data: {},\n      };\n      return {\n        ...state,\n        currencies,\n      };\n    }\n    case FETCH_CURRENCIES_SUCCESS: {\n      const currencies = {\n        ...state.currencies,\n        fetching: false,\n        fetched: true,\n        data: action.currencies,\n      };\n      return {\n        ...state,\n        currencies,\n      };\n    }\n    case FETCH_CURRENCIES_FAIL: {\n      const currencies = {\n        ...state.currencies,\n        fetching: false,\n        fetched: true,\n        data: {},\n        error: action.error,\n      };\n      return {\n        ...state,\n        currencies,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","// types to fetch account list\nexport const FETCH_ACCOUNTS = \"ACCOUNT::FETCH_ACCOUNTS\";\nexport const FETCH_ACCOUNTS_SUCCESS = \"ACCOUNT::FETCH_ACCOUNTS_SUCCESS\";\nexport const FETCH_ACCOUNTS_FAIL = \"ACCOUNT::FETCH_ACCOUNTS_FAIL\";\n\n// types to fetch transactions\nexport const FETCH_TRANSACTIONS = \"ACCOUNT::FETCH_TRANSACTIONS\";\nexport const FETCH_TRANSACTIONS_SUCCESS = \"ACCOUNT::FETCH_TRANSACTIONS_SUCCESS\";\nexport const FETCH_TRANSACTIONS_FAIL = \"ACCOUNT::FETCH_TRANSACTIONS_FAIL\";\n\n// types to fetch currencies\nexport const FETCH_CURRENCIES = \"ACCOUNT::FETCH_CURRENCIES\";\nexport const FETCH_CURRENCIES_SUCCESS = \"ACCOUNT::FETCH_CURRENCIES_SUCCESS\";\nexport const FETCH_CURRENCIES_FAIL = \"ACCOUNT::FETCH_CURRENCIES_FAIL\";\n","import { AxiosInstance } from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport mockAccounts from \"../assets/mock-data/accounts.json\";\nimport mockCurrencies from \"../assets/mock-data/currencies.json\";\nimport mockTransactions from \"../assets/mock-data/transactions.json\";\nimport mockUser from \"../assets/mock-data/user.json\";\nimport {\n  Account,\n  CurrencyType,\n  Transaction,\n  TransactionAction,\n} from \"../redux/account/account.reducer\";\n\nexport const isMockEnabled = () => {\n  return true;\n  // return process.env.REACT_APP_MOCK_ENABLED === \"true\";\n};\n\nconst mockOptions = () => {\n  const mockOptions: any = { delayResponse: 100 };\n  // if (process.env.REACT_APP_MOCK_TIME) {\n  //   mockOptions.delayResponse = parseInt(process.env.REACT_APP_MOCK_TIME);\n  // }\n  return mockOptions;\n};\n\nexport const initializeAxiosMockAdapter = (\n  instance: AxiosInstance\n): MockAdapter => {\n  const mock = new MockAdapter(instance, mockOptions());\n\n  mock.onGet(\"/accounts\").reply(() => getAccounts());\n\n  mock.onGet(\"/profile\").reply(() => getProfile());\n\n  mock.onGet(\"/currencies\").reply(() => getCurrencies());\n\n  mock.onGet(/\\/transactions\\/[sS]*/).reply((config) => {\n    const url = config.url;\n    let id = null;\n    if (url) {\n      id = url.substring(url.lastIndexOf(\"/\") + 1);\n    }\n    return getTransactions(id);\n  });\n\n  mock.onPost(\"/transfer\").reply((config) => {\n    const { fromAccount, toAccount, transferAmount, currency, description } =\n      JSON.parse(config?.data);\n\n    return postTransfer(\n      fromAccount,\n      toAccount,\n      transferAmount,\n      currency,\n      description\n    );\n  });\n\n  return mock;\n};\n\nconst transactions = { ...mockTransactions } as { [id: string]: Transaction[] };\nconst accounts = [...mockAccounts] as Account[];\n\nconst getAccounts = () => {\n  return [200, accounts];\n};\nconst getProfile = () => {\n  return [200, mockUser];\n};\n\nconst getTransactions = (id: string | null) => {\n  if (id === null) {\n    return [400];\n  }\n  return [200, (transactions as any)[id] ?? []];\n};\n\nconst getCurrencies = () => {\n  return [200, mockCurrencies];\n};\n\nconst postTransfer = (\n  fromAccountId: string,\n  toAccountId: string,\n  transferAmount: number,\n  currency: CurrencyType,\n  description = \"\"\n) => {\n  const multiplier = mockCurrencies[currency];\n  if (multiplier === null || multiplier === undefined) {\n    return [400, \"Bad Request\"];\n  }\n\n  const actualAmount = transferAmount / multiplier;\n\n  if (validateTransfer(fromAccountId, toAccountId, actualAmount)) {\n    const fromAccount = getMockAccount(fromAccountId) as Account;\n    const toAccount = getMockAccount(toAccountId) as Account;\n\n    fromAccount.balance -= actualAmount;\n    toAccount.balance += actualAmount;\n    const timestamp = Date.now();\n    const transactionFrom: Transaction = {\n      id: generateUUID(),\n      timestamp: timestamp,\n      action: TransactionAction.DEBIT,\n      amount: transferAmount,\n      currency,\n      description,\n      balance: fromAccount.balance,\n    };\n    transactions[fromAccountId].push(transactionFrom);\n    const transactionTo: Transaction = {\n      id: generateUUID(),\n      timestamp: timestamp,\n      action: TransactionAction.CREDIT,\n      amount: transferAmount,\n      currency,\n      description,\n      balance: toAccount.balance,\n    };\n    if (!Array.isArray(transactions[toAccountId])) {\n      transactions[toAccountId] = [];\n    }\n    transactions[toAccountId].push(transactionTo);\n    return [200];\n  }\n  return [400, \"Bad Request\"];\n};\n\nfunction getMockAccount(accountId: string): Account | undefined {\n  return accounts.find((item) => item.id === accountId);\n}\n\nconst validateTransfer = (\n  fromAccountId: string,\n  toAccountId: string,\n  transferAmount: number\n): boolean => {\n  if (fromAccountId?.trim() && toAccountId?.trim() && transferAmount > 0) {\n    // only process if from account id & to account id are passed and amount > 0\n    if (getMockAccount(fromAccountId) && getMockAccount(toAccountId)) {\n      // only process if accounts exist\n      const fromAccount = getMockAccount(fromAccountId) as Account;\n      if (fromAccount.balance > transferAmount) {\n        // only process if from account has balance more than transfer amount\n        return true;\n      }\n      return false;\n    }\n  }\n  return false;\n};\n\nexport function generateUUID() {\n  // Public Domain/MIT\n  var d = new Date().getTime(); //Timestamp\n  var d2 = (performance && performance.now && performance.now() * 1000) || 0; //Time in microseconds since page-load or 0 if unsupported\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16; //random number between 0 and 16\n    if (d > 0) {\n      //Use timestamp until depleted\n      r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      //Use microseconds since page-load if supported\n      r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n    return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n","import axios from \"axios\";\nimport { initializeAxiosMockAdapter, isMockEnabled } from \"../mock/mock.config\";\n\nlet instance = axios.create({\n  baseURL: \"http://localhost:8000\",\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n\nif (isMockEnabled()) {\n  initializeAxiosMockAdapter(instance);\n}\n\nexport const http = instance;\n","import { Dispatch } from \"react\";\nimport {\n  getAccounts,\n  getCurrencies,\n} from \"../../services/accounts-http.service\";\nimport { getTransactions } from \"./../../services/accounts-http.service\";\nimport { Account, Currency, Transaction } from \"./account.reducer\";\nimport {\n  FETCH_ACCOUNTS,\n  FETCH_ACCOUNTS_FAIL,\n  FETCH_ACCOUNTS_SUCCESS,\n  FETCH_CURRENCIES,\n  FETCH_CURRENCIES_FAIL,\n  FETCH_CURRENCIES_SUCCESS,\n  FETCH_TRANSACTIONS,\n  FETCH_TRANSACTIONS_FAIL,\n  FETCH_TRANSACTIONS_SUCCESS,\n} from \"./account.types\";\n\ntype FetchAccountsAction = {\n  type: typeof FETCH_ACCOUNTS;\n};\ntype FetchAccountsSuccessAction = {\n  type: typeof FETCH_ACCOUNTS_SUCCESS;\n  accounts: Account[];\n};\ntype FetchAccountsFailAction = {\n  type: typeof FETCH_ACCOUNTS_FAIL;\n  error: any;\n};\n\ntype FetchTransactionsAction = {\n  type: typeof FETCH_TRANSACTIONS;\n};\ntype FetchTransactionsSuccessAction = {\n  type: typeof FETCH_TRANSACTIONS_SUCCESS;\n  transactions: Transaction[];\n};\ntype FetchTransactionsFailAction = {\n  type: typeof FETCH_TRANSACTIONS_FAIL;\n  error: any;\n};\n\ntype FetchCurrenciesAction = {\n  type: typeof FETCH_CURRENCIES;\n};\ntype FetchCurrenciesSuccessAction = {\n  type: typeof FETCH_CURRENCIES_SUCCESS;\n  currencies: Currency;\n};\ntype FetchCurrenciesFailAction = {\n  type: typeof FETCH_CURRENCIES_FAIL;\n  error: any;\n};\n\nexport type AccountActions =\n  | FetchAccountsAction\n  | FetchAccountsSuccessAction\n  | FetchAccountsFailAction\n  | FetchTransactionsAction\n  | FetchTransactionsSuccessAction\n  | FetchTransactionsFailAction\n  | FetchCurrenciesAction\n  | FetchCurrenciesSuccessAction\n  | FetchCurrenciesFailAction;\n\nexport const fetchAccounts = () => (dispatch: Dispatch<AccountActions>) => {\n  dispatch({ type: FETCH_ACCOUNTS });\n\n  return getAccounts()\n    .then((res) =>\n      dispatch({ type: FETCH_ACCOUNTS_SUCCESS, accounts: res.data })\n    )\n    .catch((error) =>\n      dispatch({\n        type: FETCH_ACCOUNTS_FAIL,\n        error: {\n          data: error.response?.data,\n          status: error.response?.status,\n        },\n      })\n    );\n};\n\nexport const fetchTransactions =\n  (id: string) => (dispatch: Dispatch<AccountActions>) => {\n    dispatch({ type: FETCH_TRANSACTIONS });\n\n    return getTransactions(id)\n      .then((res) =>\n        dispatch({\n          type: FETCH_TRANSACTIONS_SUCCESS,\n          transactions: res.data,\n        })\n      )\n      .catch((error) =>\n        dispatch({\n          type: FETCH_TRANSACTIONS_FAIL,\n          error: {\n            data: error.response?.data,\n            status: error.response?.status,\n          },\n        })\n      );\n  };\n\nexport const fetchCurrencies = () => (dispatch: Dispatch<AccountActions>) => {\n  dispatch({ type: FETCH_CURRENCIES });\n\n  return getCurrencies()\n    .then((res) =>\n      dispatch({\n        type: FETCH_CURRENCIES_SUCCESS,\n        currencies: res.data,\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: FETCH_CURRENCIES_FAIL,\n        error: {\n          data: error.response?.data,\n          status: error.response?.status,\n        },\n      })\n    );\n};\n","import {\n  Account,\n  Currency,\n  CurrencyType,\n  Transaction,\n} from \"./../redux/account/account.reducer\";\nimport { http } from \"./http\";\n\nexport const getAccounts = () => {\n  return http.get<Account[]>(\"/accounts\");\n};\n\nexport const getTransactions = (id: string) => {\n  return http.get<Transaction[]>(`/transactions/${id}`);\n};\n\nexport const getCurrencies = () => {\n  return http.get<Currency>(`/currencies`);\n};\n\nexport interface TransferMoneyPayload {\n  fromAccount: string;\n  toAccount: string;\n  transferAmount: number;\n  currency: CurrencyType;\n  description: string;\n}\n\nexport const postTransfer = (data: TransferMoneyPayload) => {\n  return http.post(\"/transfer\", data);\n};\n","export const GET_PROFILE = \"USER::GET_PROFILE\";\nexport const GET_PROFILE_SUCCESS = \"USER::GET_PROFILE_SUCCESS\";\nexport const GET_PROFILE_FAIL = \"USER::GET_PROFILE_FAIL\";\n","import { Dispatch } from \"react\";\nimport { getUserProfile } from \"../../services/users-http.service\";\nimport { UserProfile } from \"./user.reducer\";\nimport {\n  GET_PROFILE,\n  GET_PROFILE_FAIL,\n  GET_PROFILE_SUCCESS,\n} from \"./user.types\";\n\ntype GetUser = {\n  type: typeof GET_PROFILE;\n};\ntype GetUserSuccess = {\n  type: typeof GET_PROFILE_SUCCESS;\n  profile: UserProfile;\n};\ntype GetUserFail = {\n  type: typeof GET_PROFILE_FAIL;\n  error: any;\n};\n\nexport type UserActions = GetUser | GetUserSuccess | GetUserFail;\n\nexport const getUser = () => (dispatch: Dispatch<UserActions>) => {\n  dispatch({ type: GET_PROFILE });\n\n  return getUserProfile()\n    .then((res) => dispatch({ type: GET_PROFILE_SUCCESS, profile: res.data }))\n    .catch((error) =>\n      dispatch({\n        type: GET_PROFILE_FAIL,\n        error: {\n          data: error.response?.data,\n          status: error.response?.status,\n        },\n      })\n    );\n};\n","import { UserProfile } from \"../redux/user/user.reducer\";\nimport { http } from \"./http\";\n\nexport const getUserProfile = () => {\n  return http.get<UserProfile>(`/profile`);\n};\n","import { AppState } from \"../reducers\";\n\nconst getAccountState = (store: AppState) => store.account;\n\nexport const getAccounts = (store: AppState) =>\n  getAccountState(store)?.accounts;\n\nexport const getCurrencies = (store: AppState) =>\n  getAccountState(store)?.currencies;\n\nexport const getTransactions = (store: AppState) =>\n  getAccountState(store)?.transactions;\n","export default __webpack_public_path__ + \"static/media/loader.fc22bb7c.svg\";","import React from \"react\";\nimport LoaderImg from \"../../assets/loader.svg\";\n\nexport default function Loader(props: { height: string }) {\n  const style = {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  };\n  const imgStyle = {\n    height: props.height,\n    width: \"auto\",\n  };\n  return (\n    <div data-testid=\"loader\" style={style}>\n      <img style={imgStyle} src={LoaderImg} alt=\"loading\" />\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { Transaction } from \"../../redux/account/account.reducer\";\n\nexport default function AccountBalanceChart(props: { data: Transaction[] }) {\n  const data = props.data;\n  return data.length ? (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <LineChart\n        width={500}\n        height={400}\n        data={props.data.map((item) => ({\n          ...item,\n          timestamp: new Date(item.timestamp).toLocaleString(),\n        }))}\n        margin={{\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"timestamp\" domain={[\"auto\", \"auto\"]} name=\"Time\" />\n        <YAxis />\n        <Tooltip />\n        <Line type=\"monotone\" dataKey=\"balance\" stroke=\"#82ca9d\" />\n      </LineChart>\n    </ResponsiveContainer>\n  ) : (\n    <></>\n  );\n}\n","import {\n  createStyles,\n  Divider,\n  makeStyles,\n  Theme,\n  Typography\n} from \"@material-ui/core\";\nimport { ErrorOutline } from \"@material-ui/icons\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Transaction } from \"../../redux/account/account.reducer\";\nimport { getAccounts } from \"../../redux/account/account.selector\";\nimport { AppState } from \"../../redux/reducers\";\nimport Loader from \"../loader/Loader\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    depositContext: {\n      flex: 1,\n    },\n  })\n);\n\nexport default function Balance(props: { transactions: Transaction[], id: string }) {\n  const classes = useStyles();\n  const accounts = useSelector((state: AppState) => getAccounts(state));\n\n  const lastTransaction: Transaction = props.transactions[props.transactions.length - 1]\n\n  if (accounts.fetching) {\n    return <Loader height=\"0.3rem\" />\n  }\n  if (accounts.error || props.id === null) {\n    return <>\n      <ErrorOutline />\n      <Typography\n        component=\"h1\"\n        variant=\"h5\"\n        color=\"secondary\"\n        gutterBottom\n      >Error while fetching accounts</Typography>\n    </>\n  }\n\n  const account = accounts.data?.find(item => item.id === props.id);\n\n  if (account === null || account === undefined) {\n    return <>\n      <ErrorOutline />\n      <Typography\n        component=\"h1\"\n        variant=\"h5\"\n        color=\"secondary\"\n        gutterBottom\n      >Error with account data</Typography>\n    </>\n  }\n\n  return (\n    <>\n      <Typography component=\"p\" variant=\"h4\">\n        {account.currency + account.balance}\n      </Typography>\n      <Typography component=\"h1\" variant=\"h5\" color=\"primary\" gutterBottom>\n        Balance\n          </Typography>\n      <span className={classes.depositContext} />\n      <Divider />\n      <span className={classes.depositContext} />\n      <Typography component=\"p\" variant=\"h4\">\n        {lastTransaction.currency + lastTransaction.amount}\n      </Typography>\n      <Typography color=\"textSecondary\">\n        {new Date(lastTransaction.timestamp).toLocaleString()}\n      </Typography>\n      <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n        Recent {lastTransaction.action}\n      </Typography>\n    </>\n  );\n}\n","import {\n  DataGrid,\n  GridColDef,\n  GridSortDirection,\n  GridSortItem,\n  GridSortModel,\n  GridToolbar,\n  GridValueFormatterParams\n} from \"@material-ui/data-grid\";\nimport { RouteComponentProps } from \"@reach/router\";\nimport { Transaction } from \"../../redux/account/account.reducer\";\n\n\nconst columns: GridColDef[] = [\n  {\n    field: \"timestamp\",\n    headerName: \"Time\",\n    width: 200,\n    type: \"dateTime\",\n    valueFormatter: (params: GridValueFormatterParams) => {\n      const value = params.getValue(params.id, \"timestamp\");\n      return value ? new Date(Number(value)).toLocaleString() : \"\";\n    },\n  },\n  { field: \"description\", headerName: \"Description\", width: 200, flex: 1 },\n  { field: \"action\", headerName: \"Action\", width: 150 },\n  {\n    field: \"amount\",\n    headerName: \"Amount\",\n    width: 150,\n    align: \"right\",\n    headerAlign: \"right\",\n    type: \"number\",\n    valueFormatter: (params: GridValueFormatterParams) => {\n      const amount = params.getValue(params.id, \"amount\");\n      const currency = params.row.currency;\n      return `${currency ?? ''}${(amount ?? '').toLocaleString()}`;\n    },\n  },\n];\n\nconst timeStampSort: GridSortItem = {\n  field: \"timestamp\",\n  sort: \"desc\" as GridSortDirection,\n};\n\nconst sortModel: GridSortModel = [timeStampSort];\n\ninterface TransactionProps extends RouteComponentProps {\n  transactions: Transaction[];\n}\n\nexport default function Transactions(props: TransactionProps) {\n  const transactions = props.transactions;\n  const dataGridComponents = {\n    Toolbar: GridToolbar,\n  };\n  const gridContainerStyle = {\n    height: \"30rem\",\n    width: \"100%\",\n  };\n\n  return (\n    <div style={gridContainerStyle}>\n      <DataGrid\n        rows={transactions}\n        columns={columns}\n        pagination\n        autoPageSize\n        sortModel={sortModel}\n        components={dataGridComponents}\n      />\n    </div>\n  );\n}\n","import { Grid, makeStyles, Paper } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport { Transaction } from \"../../redux/account/account.reducer\";\nimport AccountBalanceChart from \"./AccountBalanceChart\";\nimport Balance from \"./Balance\";\nimport Transactions from \"./Transactions\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default function AccountPage(props: { transactions: Transaction[], id: string }) {\n  const classes = useStyles();\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n    <Grid data-testid=\"accountsGrid\" container spacing={3}>\n      {/* Chart */}\n      <Grid item xs={12} md={8} lg={9}>\n        <Paper className={fixedHeightPaper}>\n          <AccountBalanceChart data={props.transactions} />\n        </Paper>\n      </Grid>\n      {/* Recent Deposits & Balance */}\n      <Grid item xs={12} md={4} lg={3}>\n        <Paper className={fixedHeightPaper}>\n          <Balance transactions={props.transactions} id={props.id} />\n        </Paper>\n      </Grid>\n      {/* Recent Orders */}\n      <Grid item xs={12}>\n        <Transactions transactions={props.transactions} />\n      </Grid>\n    </Grid>\n  );\n}\n","import {\n  Button,\n  createStyles,\n  makeStyles,\n  Theme,\n  Tooltip,\n  Typography\n} from \"@material-ui/core\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { ArrowDropDown, ErrorOutline } from \"@material-ui/icons\";\nimport { Link } from \"@reach/router\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getAccounts } from \"../../redux/account/account.selector\";\nimport { AppState } from \"../../redux/reducers\";\nimport Loader from \"../loader/Loader\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    disabled: {\n      opacity: 0.5,\n    },\n    active: {\n      color: theme.palette.primary.main,\n      fontWeight: \"bold\",\n    },\n  })\n);\n\nfunction AccountPicker(props: { id: string | undefined }) {\n  const classes = useStyles();\n\n  const account = props.id;\n  const accounts = useSelector((state: AppState) => getAccounts(state));\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const isMenuOpen = Boolean(anchorEl);\n\n  const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = (account: string) => {\n    setAnchorEl(null);\n  };\n\n  const menuId = \"primary-search-account-menu\";\n  const renderMenu = (\n    <Menu\n      anchorEl={anchorEl}\n      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      open={isMenuOpen}\n      onClose={handleMenuClose}\n    >\n      {accounts.data.map(({ id, label }) => (\n        <Link key={id} to={`/${id}`}>\n          <MenuItem\n            className={id === account ? classes.active : \"\"}\n            onClick={() => handleMenuClose(id)}\n          >\n            {label}\n          </MenuItem>\n        </Link>\n      ))}\n    </Menu>\n  );\n\n  return (\n    <Typography component=\"h1\" variant=\"h5\" color=\"primary\" gutterBottom>\n      Transactions for account\n      {accounts.fetched && accounts.error && (\n        <Tooltip title=\"Error while fetching accounts\">\n          <ErrorOutline />\n        </Tooltip>\n      )}\n      <Button\n        aria-label=\"account of current user\"\n        aria-controls={menuId}\n        aria-haspopup=\"true\"\n        onClick={handleProfileMenuOpen}\n        color=\"inherit\"\n        className={accounts.data.length < 1 ? classes.disabled : \"\"}\n      >\n        {accounts.fetching ? <Loader height=\"0.3rem\" /> : account || \"............\"}\n        {accounts.fetched && accounts.data?.length > 0 && <ArrowDropDown />}\n      </Button>\n      {accounts.fetched && accounts.data?.length > 0 && renderMenu}\n    </Typography>\n  );\n}\n\nexport default AccountPicker;\n","import { Container, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport { RouteComponentProps } from \"@reach/router\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchTransactions } from \"../../redux/account/account.actions\";\nimport { getTransactions } from \"../../redux/account/account.selector\";\nimport { AppState } from \"../../redux/reducers\";\nimport Loader from \"../loader/Loader\";\nimport AccountPage from \"./AccountPage\";\nimport AccountPicker from \"./AccountPicker\";\n\ninterface AccountPageProps extends RouteComponentProps {\n  id?: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: \"100vh\",\n    overflow: \"auto\",\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n  },\n  fixedHeight: {\n    height: 240,\n  },\n  info: {\n    textAlign: \"center\",\n    padding: theme.spacing(5),\n  },\n}));\n\nexport default function AccountsPage(props: AccountPageProps) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (props.id) {\n      dispatch(fetchTransactions(props.id));\n    }\n  }, [dispatch, props.id]);\n\n  const transactions = useSelector((state: AppState) => getTransactions(state));\n\n  return (\n    <main className={classes.content}>\n      <div className={classes.appBarSpacer} />\n      <Container maxWidth=\"lg\" className={classes.container}>\n        <AccountPicker id={props.id} />\n        {transactions.fetched && transactions.data?.length > 0 && props.id && (\n          <AccountPage transactions={transactions.data} id={props.id} />\n        )}\n        {props.id && transactions.fetched && transactions.data?.length < 1 && (\n          <Paper className={classes.info}>\n            <Typography\n              component=\"h1\"\n              variant=\"h5\"\n              color=\"primary\"\n              gutterBottom\n            >\n              No transactions found\n            </Typography>\n          </Paper>\n        )}\n        {!props.id && (\n          <Paper className={classes.info}>\n            <Typography\n              component=\"h1\"\n              variant=\"h5\"\n              color=\"primary\"\n              gutterBottom\n            >\n              Please select an account\n            </Typography>\n          </Paper>\n        )}\n        {transactions.fetching && (\n          <Paper className={classes.info}>\n            <Typography\n              component=\"h1\"\n              variant=\"h5\"\n              color=\"primary\"\n              gutterBottom\n            >\n              <Loader height=\"1rem\" />\n            </Typography>\n          </Paper>\n        )}\n      </Container>\n    </main>\n  );\n}\n","import { Button } from \"@material-ui/core\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { AccountBalance, AttachMoney } from \"@material-ui/icons\";\nimport { Link } from \"@reach/router\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState } from \"../../redux/reducers\";\nimport { getUser } from \"../../redux/selectors\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    flexCenter: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    grow: {\n      flexGrow: 1,\n    },\n    justifyBetween: {\n      justifyContent: \"space-between\",\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      display: \"none\",\n      textAlign: \"left\",\n      flexGrow: 1,\n      [theme.breakpoints.up(\"sm\")]: {\n        display: \"block\",\n      },\n    },\n    link: {\n      color: \"unset\",\n    },\n  })\n);\n\nexport default function Header() {\n  const classes = useStyles();\n  const profile = useSelector((state: AppState) => getUser(state));\n\n  return (\n    <div className={classes.grow}>\n      <AppBar position=\"fixed\">\n        <Toolbar className={classes.justifyBetween}>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Welcome {profile.fetched ? ` ${profile.data.name}` : ''}\n          </Typography>\n          <div className={classes.flexCenter}>\n            <Link to=\"/\" className={classes.link}>\n              <Button color=\"inherit\" aria-label=\"Account Transactions\">\n                <AccountBalance />\n                &nbsp;Transactions\n              </Button>\n            </Link>\n            <Link to=\"/transfer\" className={classes.link}>\n              <Button color=\"inherit\" aria-label=\"Transfer Money\">\n                <AttachMoney />\n                Transfer\n              </Button>\n            </Link>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import { AppState } from \"../reducers\";\n\nconst getUserState = (store: AppState) => store.user;\n\nexport const getUser = (store: AppState) => getUserState(store)?.profile;\n","import { RouteComponentProps } from \"@reach/router\";\nimport React from \"react\";\nimport \"./NotFound.css\";\n\nexport default function NotFoundPage(props: RouteComponentProps) {\n  return (\n    <div className=\"not-found-container\">\n      <div className=\"not-found\" title=\"404\">\n        404\n      </div>\n    </div>\n  );\n}\n","import { Account, CurrencyType } from \"../../redux/account/account.reducer\";\nimport { Currency } from \"./../../redux/account/account.reducer\";\n\nexport const initialFormValues = {\n  fromAccount: \"\",\n  toAccount: \"\",\n  transferAmount: 0,\n  currency: \"\",\n  description: \"\",\n  formSubmitted: false,\n  formSubmitting: false,\n  isFormPristine: true,\n  isFormValid: true,\n  success: false,\n};\n\nexport const initialHelperText = {\n  fromAccount: \"Select account to send money\",\n  toAccount: \"Select account to receive money\",\n  transferAmount: \"Enter amount to send\",\n  currency: \"Select a currency to transfer\",\n  description: \"Enter description for transfer\",\n};\n\nexport const initialErrorsState = {\n  fromAccount: false,\n  toAccount: false,\n  transferAmount: false,\n  currency: false,\n  description: false,\n};\n\nexport interface TransferMoneyFormValidityPayload {\n  errors: typeof initialErrorsState;\n  helperText: typeof initialHelperText;\n  values: typeof initialFormValues;\n  accounts: Account[];\n  currencies: Currency;\n  fieldValues: Partial<typeof initialFormValues>;\n}\n\nconst isFormValid = (\n  values: typeof initialFormValues,\n  errors: typeof initialErrorsState\n): boolean => {\n  // this function will check if the form is valid and return a boolean value\n  const isValid =\n    values.transferAmount > 0 &&\n    values.toAccount &&\n    values.fromAccount &&\n    values.currency &&\n    Object.values(errors).every((x) => x === false);\n  return !!isValid;\n};\n\nexport const updateValuesAndValidity = (\n  payload: TransferMoneyFormValidityPayload\n): {\n  errors: typeof initialErrorsState;\n  helperText: typeof initialHelperText;\n  values: typeof initialFormValues;\n} => {\n  const { errors, helperText, values, accounts, currencies, fieldValues } =\n    payload;\n  const accountsBalance: Map<string, { balance: number; currency: string }> =\n    new Map();\n\n  if (Array.isArray(accounts)) {\n    accounts.forEach((item) => {\n      accountsBalance.set(item.id, {\n        balance: item.balance,\n        currency: item.currency,\n      });\n    });\n  }\n\n  let multiplier = 1;\n  if (currencies && currencies.hasOwnProperty(values.currency)) {\n    multiplier = currencies[values.currency] ?? 1;\n  }\n\n  // this function will check if the form values are valid\n  let newErrors = { ...errors };\n  let newHelperText = { ...helperText };\n  let newValues = { ...values };\n  const defaultBalance = { balance: 0, currency: \"\" };\n\n  if (fieldValues.hasOwnProperty(\"fromAccount\")) {\n    const newValue = fieldValues.fromAccount ?? \"\";\n    const { balance, currency } =\n      accountsBalance.get(newValue) || defaultBalance;\n    if (newValue) {\n      if (newValue === values.toAccount) {\n        // if from and to account are same then reset one of them and show error\n        newValues.toAccount = \"\";\n        newHelperText.toAccount = \"From and To account cannot be the same\";\n        newErrors.toAccount = true;\n      }\n      newErrors.fromAccount = false;\n      // show balance of account in helper text\n      newHelperText.fromAccount = `Available amount: ${currency}${balance}`;\n    } else if (!newValue) {\n      newErrors.fromAccount = true;\n      newHelperText.fromAccount = \"From Account is required\";\n    }\n\n    if (currency && values.transferAmount > balance * multiplier) {\n      // if amount to send is more than balance then show error\n      newHelperText.transferAmount = `Amount cannot exceed balance: ${\n        values.currency\n      }${balance * multiplier}`;\n      newErrors.transferAmount = true;\n    } else {\n      newHelperText.transferAmount = `Max amount: ${values.currency}${\n        balance * multiplier\n      }`;\n      newErrors.transferAmount = false;\n    }\n    newValues.fromAccount = newValue;\n  }\n  if (fieldValues.hasOwnProperty(\"toAccount\")) {\n    const newValue = fieldValues.toAccount ?? \"\";\n    if (newValue) {\n      if (newValue === values.fromAccount) {\n        // if from and to account are same then reset one of them and show error\n        newValues.fromAccount = \"\";\n        newHelperText.fromAccount = \"From and To account cannot be the same\";\n        newErrors.fromAccount = true;\n      }\n      newErrors.toAccount = false;\n      // show balance of account in helper text\n      const { balance, currency } =\n        accountsBalance.get(newValue) || defaultBalance;\n      newHelperText.toAccount = `Available amount: ${currency}${balance}`;\n    } else if (!newValue) {\n      newErrors.toAccount = true;\n      newHelperText.toAccount = \"To Account is required\";\n    }\n    newValues.toAccount = newValue;\n  }\n  if (fieldValues.hasOwnProperty(\"transferAmount\")) {\n    const newValue = Number(fieldValues.transferAmount);\n    newValues.transferAmount = newValue;\n\n    const { balance, currency } =\n      accountsBalance.get(values.fromAccount) || defaultBalance;\n    if (currency && newValue > balance * multiplier) {\n      newHelperText.transferAmount = `Amount cannot exceed balance: ${\n        values.currency\n      }${balance * multiplier}`;\n      newErrors.transferAmount = true;\n    } else {\n      newHelperText.transferAmount = `Max amount: ${values.currency}${\n        balance * multiplier\n      }`;\n      newErrors.transferAmount = false;\n    }\n  }\n\n  if (fieldValues.hasOwnProperty(\"currency\")) {\n    const newValue = fieldValues.currency as CurrencyType;\n    if (currencies && currencies.hasOwnProperty(newValue)) {\n      multiplier = currencies[newValue] ?? 1;\n    }\n    const { balance } =\n      accountsBalance.get(values.fromAccount) || defaultBalance;\n\n    if (!newValue) {\n      // TODO: fix to check for type\n      newHelperText.currency = `Valid currency is required to make transfer`;\n      newErrors.currency = true;\n    } else {\n      newHelperText.currency = \"Select a currency to transfer\";\n      newErrors.transferAmount = false;\n      newErrors.currency = false;\n    }\n    newHelperText.transferAmount = `Max amount: ${newValue}${\n      balance * multiplier\n    }`;\n    newValues.currency = newValue;\n  }\n  if (fieldValues.hasOwnProperty(\"description\")) {\n    const newValue = fieldValues.description ?? \"\";\n    newValues.description = newValue;\n  }\n  newValues.isFormValid = isFormValid(newValues, newErrors);\n  newValues.isFormPristine = false;\n  return { errors: newErrors, helperText: newHelperText, values: newValues };\n};\n","import { Button, IconButton, Typography } from \"@material-ui/core\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { ArrowForward, SendOutlined } from \"@material-ui/icons\";\nimport { Account, Currency } from \"../../redux/account/account.reducer\";\nimport { ApiData } from \"../../redux/reducers\";\nimport Loader from \"../loader/Loader\";\nimport { initialErrorsState, initialFormValues, initialHelperText } from \"./TransferMoney.config\";\n\nconst useStyles = makeStyles((theme) => ({\n  row: {\n    display: \"grid\",\n    gridGap: \"1rem\",\n    alignItems: \"start\",\n    gridTemplateColumns: \"1fr auto 1fr\",\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n  },\n  title: {\n    textAlign: \"center\",\n    paddingBottom: theme.spacing(4),\n  },\n  centerContainer: {\n    width: \"100%\",\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n    textAlign: \"center\",\n  },\n}));\n\nexport interface TransferMoneyContentProps {\n  accounts: ApiData<Account[]>,\n  currencies: ApiData<Currency>,\n  values: typeof initialFormValues;\n  handleInputValue: (e: any) => void;\n  handleFormSubmit: (e: any) => Promise<void>;\n  helperText: typeof initialHelperText;\n  errors: typeof initialErrorsState;\n  resetForm: () => void;\n}\n\nexport default function TransferMoneyContent(props: TransferMoneyContentProps) {\n  const classes = useStyles();\n\n  if (props.accounts?.fetched && props.currencies.fetched) {\n    if (props.values.formSubmitted) {\n      return <>\n        <Typography\n          className={classes.title}\n          component=\"h1\"\n          variant=\"h3\"\n          color=\"primary\"\n          gutterBottom\n          data-testid=\"postTransferMoneyFormSubmit\"\n        >\n          Money Transfer {props.values.success === true ? 'Successful' : 'Failed'}\n        </Typography>\n        <div className={classes.centerContainer}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={props.resetForm} data-testid=\"transferMoneyAgain\"\n          >Transfer Again</Button>\n        </div>\n      </>\n    }\n    if (props.values.formSubmitting !== true) {\n      return (<>\n        <Typography\n          className={classes.title}\n          component=\"h1\"\n          variant=\"h3\"\n          color=\"primary\"\n          gutterBottom\n        >\n          Transfer Money\n      </Typography>\n        <form data-testid=\"transferMoneyForm\" autoComplete=\"off\" onSubmit={props.handleFormSubmit}>\n          <div className={classes.row}>\n            <TextField\n              name=\"currency\"\n              required={true}\n              select\n              fullWidth={true}\n              label=\"Transfer Currency\"\n              value={props.values.currency}\n              onBlur={props.handleInputValue}\n              onChange={props.handleInputValue}\n              variant=\"outlined\"\n              helperText={props.helperText.currency}\n              error={props.errors.currency}\n              data-testid=\"transferMoneyFormCurrencySelector\"\n            >\n              {Object.entries(props.currencies.data).map(([key, value]) => (\n                <MenuItem key={key} value={key}>\n                  {key}\n                </MenuItem>\n              ))}\n            </TextField>&nbsp;\n          <TextField\n              name=\"transferAmount\"\n              fullWidth={true}\n              required={true}\n              label=\"Amount\"\n              type=\"number\"\n              variant=\"outlined\"\n              value={props.values.transferAmount}\n              onBlur={props.handleInputValue}\n              onChange={props.handleInputValue}\n              helperText={props.helperText[\"transferAmount\"]}\n              error={props.errors[\"transferAmount\"]}\n              data-testid=\"transferMoneyFormAmount\"\n            />\n          </div>\n          <div className={classes.row}>\n            <TextField\n              name=\"fromAccount\"\n              fullWidth={true}\n              required={true}\n              select\n              label=\"Transfer From\"\n              value={props.values.fromAccount}\n              onBlur={props.handleInputValue}\n              onChange={props.handleInputValue}\n              variant=\"outlined\"\n              helperText={props.helperText.fromAccount}\n              error={props.errors.fromAccount}\n              data-testid=\"transferMoneyFormFromSelector\"\n            >\n              {props.accounts.data.map((option) => (\n                <MenuItem key={option.id} value={option.id}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </TextField>\n            <IconButton aria-label=\"Send Money\" color=\"primary\">\n              <ArrowForward />\n            </IconButton>\n            <TextField\n              name=\"toAccount\"\n              required={true}\n              fullWidth={true}\n              select\n              label=\"Transfer To\"\n              value={props.values.toAccount}\n              onBlur={props.handleInputValue}\n              onChange={props.handleInputValue}\n              variant=\"outlined\"\n              helperText={props.helperText.toAccount}\n              error={props.errors.toAccount}\n              data-testid=\"transferMoneyFormToSelector\"\n            >\n              {props.accounts.data.map((option) => (\n                <MenuItem key={option.id} value={option.id}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </TextField>\n          </div>\n          <div className={classes.centerContainer}>\n            <TextField\n              name=\"description\"\n              fullWidth={true}\n              label=\"Description\"\n              type=\"text\"\n              variant=\"outlined\"\n              value={props.values.description}\n              onBlur={props.handleInputValue}\n              onChange={props.handleInputValue}\n              helperText={props.helperText[\"description\"]}\n              error={props.errors[\"description\"]}\n              data-testid=\"transferMoneyFormDescription\"\n            />\n          </div>\n          <div className={classes.centerContainer}>\n            <Button\n              disabled={props.values.isFormPristine || !props.values.isFormValid || props.values.formSubmitting}\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              data-testid=\"transferMoneyFormSubmitButton\"\n            >\n              <SendOutlined /> &nbsp;&nbsp;Transfer\n          </Button>\n          </div>\n        </form>\n      </>)\n    }\n  }\n  return <Loader height=\"1rem\" />\n}","import { Container } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { RouteComponentProps } from \"@reach/router\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchAccounts } from \"../../redux/account/account.actions\";\nimport { CurrencyType } from \"../../redux/account/account.reducer\";\nimport { getAccounts, getCurrencies } from \"../../redux/account/account.selector\";\nimport { AppState } from \"../../redux/reducers\";\nimport { postTransfer } from \"../../services/accounts-http.service\";\nimport { initialErrorsState, initialFormValues, initialHelperText, updateValuesAndValidity } from \"./TransferMoney.config\";\nimport TransferMoneyContent from \"./TransferMoneyContent\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: \"100vh\",\n    overflow: \"auto\",\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n  }\n}));\n\nexport default function TransferMoney(props: RouteComponentProps) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  // We'll update \"values\" as the form updates\n  const [values, setValues] = useState(initialFormValues);\n\n  // \"errors\" is used to check the form for errors\n  const [errors, setErrors] = useState(initialErrorsState);\n\n  // \"errors\" is used to check the form for errors\n  const [helperText, setHelperText] = useState(initialHelperText);\n\n  const accounts = useSelector((state: AppState) => getAccounts(state));\n  const currencies = useSelector((state: AppState) => getCurrencies(state));\n\n  const handleInputValue = (e: React.ChangeEvent<HTMLInputElement> | React.FocusEvent<HTMLInputElement>) => {\n    // this function will be triggered by the text field's onBlur and onChange events\n    const { name, value } = e.target;\n    const res = updateValuesAndValidity({\n      errors,\n      helperText,\n      values,\n      accounts: accounts.data,\n      currencies: currencies.data,\n      fieldValues: { [name]: value }\n    });\n    setValues(res.values);\n    setErrors(res.errors);\n    setHelperText(res.helperText);\n  };\n\n  const handleFormSubmit = async (e: Event) => {\n    // this function will be triggered by the submit event\n    e.preventDefault();\n    let success = false;\n    if (!values.isFormPristine && values.isFormValid) {\n      setValues({ ...values, formSubmitting: true });\n      try {\n        const res = await postTransfer({\n          fromAccount: values.fromAccount,\n          toAccount: values.toAccount,\n          transferAmount: values.transferAmount,\n          currency: values.currency as CurrencyType,\n          description: values.description,\n        });\n        if (res) {\n          success = true;\n        }\n      } finally {\n        setValues({ ...initialFormValues, formSubmitting: false, formSubmitted: true, success });\n        resetFormValidations();\n      }\n    }\n  };\n\n  const resetForm = () => {\n    setValues({ ...initialFormValues });\n    resetFormValidations();\n  }\n  const resetFormValidations = () => {\n    setHelperText({ ...initialHelperText });\n    setErrors({ ...initialErrorsState });\n  }\n\n  useEffect(() => {\n    if (values.formSubmitted === true && values.success === true) {\n      dispatch(fetchAccounts());\n    }\n  }, [dispatch, values.formSubmitted, values.success]);\n\n  return (\n    <main className={classes.content}>\n      <div className={classes.appBarSpacer} />\n      <Container data-testid=\"transferFormContainer\" maxWidth=\"sm\" className={classes.container}>\n        <TransferMoneyContent\n          accounts={accounts}\n          currencies={currencies}\n          values={values}\n          handleInputValue={handleInputValue}\n          handleFormSubmit={handleFormSubmit}\n          helperText={helperText}\n          errors={errors}\n          resetForm={resetForm}\n        />\n      </Container>\n    </main>\n  );\n}\n","import { Router } from \"@reach/router\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchAccounts, fetchCurrencies } from \"../../redux/account/account.actions\";\nimport { getUser } from \"../../redux/actions\";\nimport AccountsPage from \"../account/AccountsPage\";\nimport Header from \"../header/Header\";\nimport NotFoundPage from \"../notfound/NotFound\";\nimport TransferMoney from \"../transfer/TransferMoney\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchAccounts());\n    dispatch(fetchCurrencies());\n    dispatch(getUser());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Header />\n      <Router>\n        <TransferMoney path=\"transfer\"></TransferMoney>\n        <AccountsPage path=\"/\"></AccountsPage>\n        <AccountsPage path=\":id\"></AccountsPage>\n        <NotFoundPage default />\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import { ApiData } from \"./../reducers\";\nimport { UserActions } from \"./user.actions\";\nimport {\n  GET_PROFILE,\n  GET_PROFILE_FAIL,\n  GET_PROFILE_SUCCESS,\n} from \"./user.types\";\n\nexport interface UserProfile {\n  name: string;\n  gender: string;\n  age: string;\n  address: string;\n}\n\nexport interface UserState {\n  profile: ApiData<UserProfile>;\n}\nconst emptyProfile = {\n  name: \"\",\n  gender: \"\",\n  age: \"\",\n  address: \"\",\n};\nexport const initialUserState: UserState = {\n  profile: {\n    fetching: false,\n    fetched: false,\n    error: null,\n    data: emptyProfile,\n  },\n};\n\nexport const user = (\n  state = initialUserState,\n  action: UserActions\n): UserState => {\n  switch (action.type) {\n    case GET_PROFILE: {\n      const profile = {\n        ...state.profile,\n        fetching: true,\n        fetched: false,\n        error: null,\n        data: emptyProfile,\n      };\n      return { ...state, profile };\n    }\n    case GET_PROFILE_SUCCESS: {\n      const profile = {\n        ...state.profile,\n        fetching: false,\n        fetched: true,\n        error: null,\n        data: action.profile,\n      };\n      return { ...state, profile };\n    }\n    case GET_PROFILE_FAIL: {\n      const profile = {\n        ...state.profile,\n        fetching: false,\n        fetched: true,\n        error: action.error,\n        data: emptyProfile,\n      };\n      return { ...state, profile };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { account, AccountState } from \"./account/account.reducer\";\nimport { user, UserState } from \"./user/user.reducer\";\n\nexport interface ApiData<T> {\n  fetching: boolean;\n  fetched: boolean;\n  error: any;\n  data: T;\n}\nexport interface AppState {\n  user: UserState;\n  account: AccountState;\n}\n\n// export the combined reducer\nexport default combineReducers({ user, account });\n","import { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { initialAccountState } from \"./account/account.reducer\";\nimport reducer, { AppState } from \"./reducers\";\nimport { initialUserState } from \"./user/user.reducer\";\n\nexport const initialAppState: AppState = {\n  user: initialUserState,\n  account: initialAccountState,\n};\n\nconst middleware = [thunk];\n\nconst composeEnhancers = composeWithDevTools({\n  // options like actionSanitizer, stateSanitizer\n});\nconst store = createStore(\n  reducer,\n  /* preloadedState, */ composeEnhancers(\n    applyMiddleware(...middleware)\n    // other store enhancers if any\n  )\n);\n\nexport default store;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"@fontsource/roboto\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/app/App\";\nimport \"./index.css\";\nimport store from \"./redux/store\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}